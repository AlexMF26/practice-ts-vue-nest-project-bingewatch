// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum EntryType {
  MOVIE
  SERIES
}

model User {
  watchlist    WatchlistItem[]
  id           String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  role         Role            @default(USER)
  email        String          @unique
  passwordHash String
  name         String
  replies      Opinion[]
}

model Entry {
  watchlistItem WatchlistItem[]
  opinion       Opinion[]
  imdbId        String          @id
  rating        Float?
  title         String
  posterUrl     String
  plot          String          @db.Text
  seasonsData   Int[] // will be empty for movies
  actors        String[]
  genre         String[]
  language      String[]
  writer        String[]
  director      String[]
  year          String
  awards        String
  rated         String
  runtime       String
}

model WatchlistItem {
  user     User   @relation(fields: [userId], references: [id])
  entry    Entry  @relation(fields: [entryId], references: [imdbId])
  id       String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId   String @db.Uuid
  entryId  String
  progress Int    @default(0)
  rating   Int?
}

model Opinion {
  author    User?     @relation(fields: [authorId], references: [id])
  entry     Entry?    @relation(fields: [entryImdb], references: [imdbId])
  replyTo   Opinion?  @relation("replies", fields: [replyToId], references: [id])
  replies   Opinion[] @relation("replies")
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  authorId  String?   @db.Uuid
  entryImdb String?
  replyToId String?   @db.Uuid
  text      String?
}
