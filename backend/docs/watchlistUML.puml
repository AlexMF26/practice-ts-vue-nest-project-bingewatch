@startuml
class EntryEntity {
    +imdbId: string
    +title: string
    +posterUrl: string
    +rating: number
    +seasons: Season[]
    +plot: string
    +rated: string
    +year: string
    +awards: string
    +runtime: string
    +director: string[]
    +writer: string[]
    +actors: string[]
    +genre: string[]
    +language: string[]
}
class Season {
    +episodes: number
}
class EntrySearchResult {
    +imdbId: string
    +title: string
    +posterUrl: string
}
class DetailedWatchlistItemEntity {
    +entry: EntryEntity
    +id: string
    +rating: number
    +progress: number
}
class WatchlistItemEntity {
    +id: string
    +userId: string
    +entryId: string
    +progress: number
    +rating: number
}
class RepositoryService extends PrismaClient {
    -logger: Logger
    +onModuleDestroy(): Promise<void>
    +onModuleInit(): Promise<void>
    +enableShutdownHooks(app: INestApplication): Promise<void>
}
class SecurityService {
    +logger: Logger
    -jwtService: JwtService
    +hashString(data: string): Promise<string>
    +validateAgainstHash(data: string, digest: string): Promise<boolean>
    +checkValidUUID(uuid: string): boolean
    +createJwtFromId(id: string): Promise<string>
}
class OpinionEntity {
    +id: string
    +authorId: string
    +entryImdb: string
    +replyToId: string
    +text: string
}
class OmdbService {
    -logger: Logger
    -httpService: HttpService
    +getEntry(id: string): Promise<OmitNever<Pick<OmitNever<Pick<OmdbMovie & OmdbEpisode, "Title" | "Year" | "Rated" | "Released" | "Runtime" | "Genre" | "Director" | "Writer" | "Actors" | "Plot" | "Language" | ... 9 more ... | "Response">> & OmdbSeries, "Title" | ... 19 more ... | "Response">>>
    +getSeason(id: string, seasonNumber: number): Promise<OmdbSeason>
    +search(query: string, page: number): Promise<OmdbSearchResult>
}
class EntriesService {
    -repositoryService: RepositoryService
    -omdbService: OmdbService
    -logger: Logger
    +findReviewsForEntry(entryId: string): Promise<OpinionEntity[]>
    -getSeason(imdbId: string, seasonNumber: number): Promise<number>
    -getSeasons(imdbId: string): Promise<number[]>
    -create(imdbId: string): Promise<EntryEntity>
    +getEntryByImdbId(imdbId: string): Promise<EntryEntity>
    +refreshRating(imdbId: string): Promise<EntryEntity>
    +refreshData(imdbId: string): Promise<EntryEntity>
    +query(query: string, page: number): Promise<EntrySearchResult[]>
    +getAllIds(): Promise<string[]>
}
class UserEntity {
    +id: string
    +role: Role
    +name: string
    +email: string
    +passwordHash: string
}
class SerializedUserEntity {
    +id: string
    +role: Role
    +name: string
    +email: string
}
class UsersService {
    -repositoryService: RepositoryService
    -securityService: SecurityService
    -logger: Logger
    +findOpinionsByUser(userId: string): Promise<OpinionEntity[]>
    +getWatchlist(userId: string): Promise<WatchlistEntity>
    +isAdmin(id: string): Promise<boolean>
    -create(data: { passwordHash: string; email: string; name: string; }): Promise<UserEntity>
    -findByEmail(email: string): Promise<string>
    +findById(id: string): Promise<UserEntity>
    +getUser(id: string): Promise<UserEntity>
    +changeUserData(id: string, requesterId: string, data: Partial<{ password: string; email: string; name: string; role: Role; }>): Promise<UserEntity>
    +validateCredentials(email: string, password: string): Promise<string | false>
    +register(data: { password: string; email: string; name: string; }): Promise<UserEntity>
    +defaultAdminInit(data: { password: string; email: string; name: string; }): Promise<UserEntity>
}
class WatchlistService {
    -repositoryService: RepositoryService
    -usersService: UsersService
    -entriesService: EntriesService
    -securityService: SecurityService
    +logger: Logger
    -getItem(id: string): Promise<WatchlistItemEntity>
    +findItemByImdbIdForUser(imdbId: string, userId: string): Promise<WatchlistItemEntity>
    +create(entryId: string, userId: string, requesterId: string): Promise<WatchlistItemEntity>
    +delete(id: string, requesterId: string): Promise<WatchlistItemEntity>
    +updateItem(id: string, requesterId: string, data: Partial<{ rating: number; progress: number; }>): Promise<WatchlistItemEntity>
}
class JwtGuard
class HTTPErrorsService {
    -logger: Logger
    +mapToHTTPError(err: ThrownError): void
}
class CreateItemDto {
    +userId: string
    +imdbId: string
}
class UpdateItemDto {
    +rating?: number
    +progress?: number
}
class WatchlistController {
    -watchlistService: WatchlistService
    -errorsService: HTTPErrorsService
    -logger: Logger
    +getWatchlistItem(userId: string, imdbId: string): Promise<WatchlistItemEntity>
    +createItem(id: string, createItemDto: CreateItemDto): Promise<WatchlistItemEntity>
    +deleteItem(requesterId: string, id: string): Promise<WatchlistItemEntity>
    +updateItem(requesterId: string, id: string, updateItemDto: UpdateItemDto): Promise<WatchlistItemEntity>
}
EntryEntity --> "*" Season
DetailedWatchlistItemEntity --> "1" EntryEntity
EntriesService ..> RepositoryService
EntriesService ..> OmdbService
UsersService ..> RepositoryService
UsersService ..> SecurityService
WatchlistService ..> RepositoryService
WatchlistService ..> UsersService
WatchlistService ..> EntriesService
WatchlistService ..> SecurityService
WatchlistController ..> WatchlistService
WatchlistController ..> HTTPErrorsService
@enduml