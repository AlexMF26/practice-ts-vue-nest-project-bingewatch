@startuml
class UserEntity {
    +id: string
    +role: Role
    +name: string
    +email: string
    +passwordHash: string
}
class SerializedUserEntity {
    +id: string
    +role: Role
    +name: string
    +email: string
}
class OpinionEntity {
    +id: string
    +authorId: string
    +entryImdb: string
    +replyToId: string
    +text: string
}
class EntryEntity {
    +imdbId: string
    +title: string
    +posterUrl: string
    +rating: number
    +seasons: Season[]
    +plot: string
    +rated: string
    +year: string
    +awards: string
    +runtime: string
    +director: string[]
    +writer: string[]
    +actors: string[]
    +genre: string[]
    +language: string[]
}
class Season {
    +episodes: number
}
class EntrySearchResult {
    +imdbId: string
    +title: string
    +posterUrl: string
}
class DetailedWatchlistItemEntity {
    +entry: EntryEntity
    +id: string
    +rating: number
    +progress: number
}
class WatchlistItemEntity {
    +id: string
    +userId: string
    +entryId: string
    +progress: number
    +rating: number
}
class RepositoryService extends PrismaClient {
    -logger: Logger
    +onModuleDestroy(): Promise<void>
    +onModuleInit(): Promise<void>
    +enableShutdownHooks(app: INestApplication): Promise<void>
}
class SecurityService {
    +logger: Logger
    -jwtService: JwtService
    +hashString(data: string): Promise<string>
    +validateAgainstHash(data: string, digest: string): Promise<boolean>
    +checkValidUUID(uuid: string): boolean
    +createJwtFromId(id: string): Promise<string>
}
class UsersService {
    -repositoryService: RepositoryService
    -securityService: SecurityService
    -logger: Logger
    +findOpinionsByUser(userId: string): Promise<OpinionEntity[]>
    +getWatchlist(userId: string): Promise<WatchlistEntity>
    +isAdmin(id: string): Promise<boolean>
    -create(data: { passwordHash: string; email: string; name: string; }): Promise<UserEntity>
    -findByEmail(email: string): Promise<string>
    +findById(id: string): Promise<UserEntity>
    +getUser(id: string): Promise<UserEntity>
    +changeUserData(id: string, requesterId: string, data: Partial<{ password: string; email: string; name: string; role: Role; }>): Promise<UserEntity>
    +validateCredentials(email: string, password: string): Promise<string | false>
    +register(data: { password: string; email: string; name: string; }): Promise<UserEntity>
    +defaultAdminInit(data: { password: string; email: string; name: string; }): Promise<UserEntity>
}
class JwtGuard
class HTTPErrorsService {
    -logger: Logger
    +mapToHTTPError(err: ThrownError): void
}
class CreateUserDto {
    +name: string
    +email: string
    +password: string
}
class UpdateUserDto {
    +name?: string
    +email?: string
    +role?: Role
    +password?: string
}
class UsersController {
    -usersService: UsersService
    -errorsService: HTTPErrorsService
    -logger: Logger
    +getOpinions(authorId: string): Promise<OpinionEntity[]>
    +getWatchlist(id: string): Promise<WatchlistEntity>
    +create(createUserDto: CreateUserDto): Promise<UserEntity>
    +update(targetId: string, updateUserDto: UpdateUserDto, requesterId: string): Promise<UserEntity>
    +get(targetId: string): Promise<UserEntity>
}
EntryEntity --> "*" Season
DetailedWatchlistItemEntity ..> EntryEntity
UsersService ..> RepositoryService
UsersService ..> SecurityService
UsersController ..> UsersService
UsersController ..> HTTPErrorsService
@enduml